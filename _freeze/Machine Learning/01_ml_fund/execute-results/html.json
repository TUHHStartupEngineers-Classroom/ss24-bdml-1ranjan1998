{
  "hash": "dd4cdfe8812513ed404866b712d8b2cb",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"01 Machine Learning Fundamentals\"\nauthor: \"Ranjan Mahesh\"\ndate: \"2024-06-22\"\noutput:\n  html_document:\n    toc: true\n    toc_float: true\n    df_print: paged\n    collapsed: false\n    number_sections: true\n    toc_depth: 3\n    #code_folding: hide\n---\n\n\n\n{r setup, include=FALSE}\nknitr::opts_chunk$set(\n    echo = TRUE,\n    message = FALSE,\n    warning = FALSE\n    )\n\n\n# Challenge Summary\n\n__Your organization wants to know which companies are similar to each other to help in identifying potential customers of a SAAS software solution (e.g. Salesforce CRM or equivalent) in various segments of the market. The Sales Department is very interested in this analysis, which will help them more easily penetrate various market segments.__\n\nYou will be using stock prices in this analysis. You come up with a method to classify companies based on how their stocks trade using their daily stock returns (percentage movement from one day to the next). This analysis will help your organization determine which companies are related to each other (competitors and have similar attributes). \n\nYou can analyze the stock prices using what you've learned in the unsupervised learning tools including K-Means and UMAP. You will use a combination of kmeans() to find groups and umap() to visualize similarity of daily stock returns.\n\n# Objectives\n\nApply your knowledge on K-Means and UMAP along with dplyr, ggplot2, and purrr to create a visualization that identifies subgroups in the S&P 500 Index. You will specifically apply:\n\n- Modeling: kmeans() and umap()\n- Iteration: purrr\n- Data Manipulation: dplyr, tidyr, and tibble\n- Visualization: ggplot2 (bonus plotly)\n\n\n# Libraries\n\nLoad the following libraries. \n\n\n{r}\n# install.packages(\"plotly\")\n\nlibrary(tidyverse)\nlibrary(tidyquant)\nlibrary(broom)\nlibrary(umap)\n\n\n\n# Data\n\nWe will be using stock prices in this analysis. Although some of you know already how to use an API to retrieve stock prices I obtained the stock prices for every stock in the S&P 500 index for you already. The files are saved in the session_6_data directory. \n\nWe can read in the stock prices. The data is 1.2M observations. The most important columns for our analysis are:\n\n- symbol: The stock ticker symbol that corresponds to a company's stock price\n- date: The timestamp relating the symbol to the share price at that point in time\n- adjusted: The stock price, adjusted for any splits and dividends (we use this when analyzing stock data over long periods of time) \n\n\n{r}\n# STOCK PRICES\nsp_500_prices_tbl <- read_rds(\"C:/Users/ranja/Documents/GitHub/ss24-bdml-ranjan/Business Decisions with Machine Learning/Machine Learning/data/Business Decisions with Machine Learning/sp_500_prices_tbl.rds\")\nsp_500_prices_tbl\n\n\nThe second data frame contains information about the stocks the most important of which are:\n\n- company: The company name\n- sector: The sector that the company belongs to\n\n{r}\n# SECTOR INFORMATION\nsp_500_index_tbl <- read_rds(\"C:/Users/ranja/Documents/GitHub/ss24-bdml-ranjan/Business Decisions with Machine Learning/Machine Learning/data/Business Decisions with Machine Learning/sp_500_index_tbl.rds\")\nsp_500_index_tbl\n\n\n\n# Question\n\n<mark>Which stock prices behave similarly?</mark>\n\nAnswering this question helps us __understand which companies are related__, and we can use clustering to help us answer it!\n\nEven if you're not interested in finance, this is still a great analysis because it will tell you which companies are competitors and which are likely in the same space (often called sectors) and can be categorized together. Bottom line - This analysis can help you better understand the dynamics of the market and competition, which is useful for all types of analyses from finance to sales to marketing.  \n\nLet's get started. \n\n## Step 1 - Convert stock prices to a standardized format (daily returns)\n\nWhat you first need to do is get the data in a format that can be converted to a \"user-item\" style matrix. The challenge here is to connect the dots between what we have and what we need to do to format it properly.\n\nWe know that in order to compare the data, it needs to be standardized or normalized. Why? Because we cannot compare values (stock prices) that are of completely different magnitudes. In order to standardize, we will convert from adjusted stock price (dollar value) to daily returns (percent change from previous day). Here is the formula. \n\n\n$$ \nreturn_{daily} = \\frac{price_{i}-price_{i-1}}{price_{i-1}}\n$$\n\nFirst, what do we have? We have stock prices for every stock in the [SP 500 Index](https://finance.yahoo.com/quote/%5EGSPC?p=%5EGSPC), which is the daily stock prices for over 500 stocks. The data set is over 1.2M observations. \n\n{r}\nsp_500_prices_tbl %>% glimpse()\n\n\nYour first task is to convert to a tibble named sp_500_daily_returns_tbl by performing the following operations:\n\n- Select the symbol, date and adjusted columns\n- Filter to dates beginning in the year 2018 and beyond. \n- Compute a Lag of 1 day on the adjusted stock price. Be sure to group by symbol first, otherwise we will have lags computed using values from the previous stock in the data frame. \n- Remove a NA values from the lagging operation\n- Compute the difference between adjusted and the lag\n- Compute the percentage difference by dividing the difference by that lag. Name this column pct_return.\n- Return only the symbol, date, and pct_return columns\n- Save as a variable named sp_500_daily_returns_tbl\n\n{r}\n# Apply your data transformation skills!\nsp_500_daily_returns_tbl <- sp_500_prices_tbl %>% \n    select(symbol, date, adjusted) %>%          \n    filter(date >= \"2018-01-01\") %>%            \n    group_by(symbol) %>% \n    mutate(adj_lag = lag(adjusted)) %>% \n    filter(!is.na(adj_lag)) %>% \n    mutate(diff = adjusted - adj_lag,\n           pct_return = diff / adj_lag) %>% \n    select(symbol, date, pct_return)\n\nsp_500_daily_returns_tbl\n# Output: sp_500_daily_returns_tbl\n\n\n\n## Step 2 - Convert to User-Item Format\n\nThe next step is to convert to a user-item format with the symbol in the first column and every other column the value of the _daily returns_ (pct_return) for every stock at each date.\n\nWe're going to import the correct results first (just in case you were not able to complete the last step).\n\n{r}\nsp_500_daily_returns_tbl <- read_rds(\"C:/Users/ranja/Documents/GitHub/ss24-bdml-ranjan/Business Decisions with Machine Learning/Machine Learning/data/Business Decisions with Machine Learning/sp_500_daily_returns_tbl.rds\")\nsp_500_daily_returns_tbl\n\n\n\nNow that we have the daily returns (percentage change from one day to the next), we can convert to a user-item format. The user in this case is the symbol (company), and the item in this case is the pct_return at each date. \n\n- Spread the date column to get the values as percentage returns. Make sure to fill an NA values with zeros. \n- Save the result as stock_date_matrix_tbl\n\n{r}\n# Convert to User-Item Format\nstock_date_matrix_tbl <- sp_500_daily_returns_tbl %>% \n    pivot_wider(names_from = date,\n                values_from = pct_return,\n                values_fill = list(pct_return = 0))\nstock_date_matrix_tbl\n# Output: stock_date_matrix_tbl\n\n\n\n\n## Step 3 - Perform K-Means Clustering\n\nNext, we'll perform __K-Means clustering__. \n\nWe're going to import the correct results first (just in case you were not able to complete the last step).\n{r}\nstock_date_matrix_tbl <- read_rds(\"C:/Users/ranja/Documents/GitHub/ss24-bdml-ranjan/Business Decisions with Machine Learning/Machine Learning/data/Business Decisions with Machine Learning/stock_date_matrix_tbl.rds\")\nstock_date_matrix_tbl\n\n\nBeginning with the stock_date_matrix_tbl, perform the following operations:\n\n- Drop the non-numeric column, symbol\n- Perform kmeans() with centers = 4 and nstart = 20\n- Save the result as kmeans_obj\n\n{r}\n# Create kmeans_obj for 4 centers\nkmeans_obj <- stock_date_matrix_tbl %>% \n    select(-symbol) %>% \n    kmeans(centers = 4, nstart = 20)\nkmeans_obj %>% glance()\n\n\nUse glance() to get the tot.withinss. \n\n{r}\n# Apply glance() to get the tot.withinss\nbroom::glance(kmeans_obj)\n\n\n## Step 4 - Find the optimal value of K\n\nNow that we are familiar with the process for calculating kmeans(), let's use purrr to iterate over many values of \"k\" using the centers argument. \n\nWe'll use this __custom function__ called kmeans_mapper():\n\n{r}\nkmeans_mapper <- function(center = 3) {\n    stock_date_matrix_tbl %>%\n        select(-symbol) %>%\n        kmeans(centers = center, nstart = 20)\n}\n\n\nApply the kmeans_mapper() and glance() functions iteratively using purrr.\n\n- Create a tibble containing column called centers that go from 1 to 30\n- Add a column named k_means with the kmeans_mapper() output. Use mutate() to add the column and map() to map centers to the kmeans_mapper() function.\n- Add a column named glance with the glance() output. Use mutate() and map() again to iterate over the column of k_means.\n- Save the output as k_means_mapped_tbl \n\n\n{r}\n# Use purrr to map\nk_means_mapped_tbl <- tibble(centers = 1:30) %>% \n    mutate(k_means = centers %>% map(kmeans_mapper),\n           glance = k_means %>% map(glance))\n\n\nk_means_mapped_tbl\n\n# Output: k_means_mapped_tbl\n\n\nNext, let's visualize the \"tot.withinss\" from the glance output as a ___Scree Plot___. \n\n- Begin with the k_means_mapped_tbl\n- Unnest the glance column\n- Plot the centers column (x-axis) versus the tot.withinss column (y-axis) using geom_point() and geom_line()\n- Add a title \"Scree Plot\" and feel free to style it with your favorite theme\n\n{r}\n# Visualize Scree Plot\nk_means_mapped_tbl %>%\n    unnest(glance) %>%\n    select(centers, tot.withinss) %>%\n    \n    # Visualization\n    ggplot(aes(centers, tot.withinss)) +\n    geom_point(color = \"#000000\", size = 4) +\n    geom_line(color = \"#2DC6D6\", size = 1) +\n    # Add labels (which are repelled a little)\n    ggrepel::geom_label_repel(aes(label = centers), color = \"#2DC6D6\") + \n    \n    # Formatting\n    labs(title = \"Skree Plot\",\n    subtitle = \"Measures the distance each of the customer are from the closes K-Means center\",\n    caption = \"Conclusion: Based on the Scree Plot, we select 3 clusters to segment the customer base.\")\n\n\nWe can see that the Scree Plot becomes linear (constant rate of change) between 5 and 10 centers for K.\n\n\n## Step 5 - Apply UMAP\n\nNext, let's plot the UMAP 2D visualization to help us investigate cluster assignments. \n\n\nWe're going to import the correct results first (just in case you were not able to complete the last step).\n{r}\nk_means_mapped_tbl <- read_rds(\"C:/Users/ranja/Documents/GitHub/ss24-bdml-ranjan/Business Decisions with Machine Learning/Machine Learning/data/Business Decisions with Machine Learning/k_means_mapped_tbl.rds\")\nk_means_mapped_tbl\n\n\nFirst, let's apply the umap() function to the stock_date_matrix_tbl, which contains our user-item matrix in tibble format.\n\n- Start with stock_date_matrix_tbl\n- De-select the symbol column\n- Use the umap() function storing the output as umap_results\n{r}\n# Apply UMAP\numap_results <-\n    subset(stock_date_matrix_tbl, select = -symbol) %>%\n    umap()\n# Store results as: umap_results\n\n\nNext, we want to combine the layout from the umap_results with the symbol column from the stock_date_matrix_tbl.\n\n- Start with umap_results$layout\n- Convert from a matrix data type to a tibble with as_tibble()\n- Bind the columns of the umap tibble with the symbol column from the stock_date_matrix_tbl.\n- Save the results as umap_results_tbl.\n\n{r}\n# Convert umap results to tibble with symbols\numap_results_tbl <- umap_results$layout %>%\n    as_tibble(.name_repair = \"unique\") %>% # argument is required to set names in the next step\n    set_names(c(\"x\", \"y\")) %>%\n    bind_cols(\n        stock_date_matrix_tbl %>% select(symbol)\n    )\n# Output: umap_results_tbl\numap_results_tbl\n\n\nFinally, let's make a quick visualization of the umap_results_tbl.\n\n- Pipe the umap_results_tbl into ggplot() mapping the columns to x-axis and y-axis\n- Add a geom_point() geometry with an alpha = 0.5\n- Apply theme_tq() and add a title \"UMAP Projection\"\n\n{r}\n# Visualize UMAP results\numap_results_tbl %>%\n    ggplot(aes(x, y)) +\n    geom_point(alpha=0.5) + \n    ggrepel::geom_label_repel(aes(label = symbol), size = 2) +\n    theme_tq() +\n    labs(title = \"UMAP Projection\")\n\n\nWe can now see that we have some clusters. However, we still need to combine the K-Means clusters and the UMAP 2D representation. \n\n\n\n## Step 6 - Combine K-Means and UMAP\n\nNext, we combine the K-Means clusters and the UMAP 2D representation\n\nWe're going to import the correct results first (just in case you were not able to complete the last step).\n{r}\nk_means_mapped_tbl <- read_rds(\"C:/Users/ranja/Documents/GitHub/ss24-bdml-ranjan/Business Decisions with Machine Learning/Machine Learning/data/Business Decisions with Machine Learning/k_means_mapped_tbl.rds\")\numap_results_tbl   <- read_rds(\"C:/Users/ranja/Documents/GitHub/ss24-bdml-ranjan/Business Decisions with Machine Learning/Machine Learning/data/Business Decisions with Machine Learning/umap_results_tbl.rds\")\numap_results_tbl \nk_means_mapped_tbl\n\n\n\nFirst, pull out the K-Means for 10 Centers. Use this since beyond this value the Scree Plot flattens. \nHave a look at the business case to recall how that works.\n\n{r}\n# Get the k_means_obj from the 10th center\nk_means_obj <- k_means_mapped_tbl %>%\n    pull(k_means) %>%\n    pluck(3)\n# Store as k_means_obj\n\n\nNext, we'll combine the clusters from the k_means_obj with the umap_results_tbl.\n\n- Begin with the k_means_obj\n- Augment the k_means_obj with the stock_date_matrix_tbl to get the clusters added to the end of the tibble\n- Select just the symbol and .cluster columns\n- Left join the result with the umap_results_tbl by the symbol column\n- Left join the result with the result of sp_500_index_tbl %>% select(symbol, company, sector) by the symbol column. \n- Store the output as umap_kmeans_results_tbl\n\n{r}\n# Use your dplyr & broom skills to combine the k_means_obj with the umap_results_tbl\nkmeans_10_clusters_tbl <- k_means_obj %>% \n    augment(stock_date_matrix_tbl) %>%\n    # Select the data we need\n    select(symbol, .cluster)\nsp_500_index_tbl_result <-sp_500_index_tbl %>% select(symbol, company, sector)\numap_kmeans_results_tbl <- umap_results_tbl %>%\n    left_join(kmeans_10_clusters_tbl,by=\"symbol\") %>%\n    left_join(sp_500_index_tbl_result,by=\"symbol\")\n\n# Output: umap_kmeans_results_tbl \ntypeof(palette_light() %>% sample(3))\ntypeof(c(\"#2d72d6\", \"#2dc6d6\", \"#2dd692\"))\n\n\nPlot the K-Means and UMAP results.\n\n- Begin with the umap_kmeans_results_tbl\n- Use ggplot() mapping V1, V2 and color = .cluster\n- Add the geom_point() geometry with alpha = 0.5\n- Apply colors as you desire (e.g. scale_color_manual(values = palette_light() %>% rep(3)))\n\n{r}\n# Visualize the combined K-Means and UMAP results\numap_kmeans_results_tbl %>%\n    mutate(label_text = str_glue(\"SYMBOL: {symbol}\n                                 Cluster: {.cluster}\")) %>%\n    \n    ggplot(aes(V1, V2, color = .cluster)) +\n    # Geometries\n    geom_point(alpha=0.5) +\n    # Formatting\n    scale_color_manual(values= c(\"#2d72d6\", \"#2dc6d6\", \"#2dd692\")) +\n    labs(title = \"Company Segmentation: 2D Projection\",\n    subtitle = \"UMAP 2D Projection with K-Means Cluster Assignment\") +\n    theme(legend.position = \"none\")\n\n\nCongratulations! You are done with the 1st challenge!",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}