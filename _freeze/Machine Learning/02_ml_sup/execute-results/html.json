{
  "hash": "848d524ccb2072b6d1e62b7c5c2431be",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"02 Supervised ML\"\ndate: \"2024-06-22\"\noutput:\n  html_document:\n    toc: true\n    toc_float: true\n    df_print: paged\n    collapsed: false\n    number_sections: true\n    toc_depth: 3\n    #code_folding: hide\n---\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidymodels)\nlibrary(broom.mixed)\nlibrary(xgboost)\nlibrary(tidyverse)\nlibrary(parsnip)\nlibrary(recipes)\nlibrary(rsample)\nlibrary(yardstick)\nlibrary(rpart.plot)\nlibrary(modeldata)\n# Data exploration\nbike_data_tbl <- readRDS(\"C:/Users/ranja/Documents/GitHub/ss24-bdml-ranjan/Business Decisions with Machine Learning/Machine Learning/data/Business Decisions with Machine Learning/bike_orderlines.rds\")\nmodel_sales_tbl <- bike_data_tbl %>%\n  select(total_price, model, category_2, frame_material) %>%\n  \n  group_by(model, category_2, frame_material) %>%\n  summarise(total_sales = sum(total_price)) %>%\n  ungroup() %>%\n  \n  arrange(desc(total_sales))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'model', 'category_2'. You can override\nusing the `.groups` argument.\n```\n\n\n:::\n\n```{.r .cell-code}\nmodel_sales_tbl %>%\n  mutate(category_2 = as_factor(category_2) %>% \n           fct_reorder(total_sales, .fun = max) %>% \n           fct_rev()) %>%\n  \n  ggplot(aes(frame_material, total_sales)) +\n  geom_violin() +\n  geom_jitter(width = 0.1, alpha = 0.5, color = \"#2c3e50\") +\n  #coord_flip() +\n  facet_wrap(~ category_2) +\n  scale_y_continuous(labels = scales::dollar_format(scale = 1e-6, suffix = \"M\", accuracy = 0.1)) +\n  tidyquant::theme_tq() +\n  labs(\n    title = \"Total Sales for Each Model\",\n    x = \"Frame Material\", y = \"Revenue\"\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRegistered S3 method overwritten by 'quantmod':\n  method            from\n  as.zoo.data.frame zoo \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Groups with fewer than two datapoints have been dropped.\nℹ Set `drop = FALSE` to consider such groups for position adjustment purposes.\nGroups with fewer than two datapoints have been dropped.\nℹ Set `drop = FALSE` to consider such groups for position adjustment purposes.\nGroups with fewer than two datapoints have been dropped.\nℹ Set `drop = FALSE` to consider such groups for position adjustment purposes.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in max(data$density, na.rm = TRUE): no non-missing arguments to max;\nreturning -Inf\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Computation failed in `stat_ydensity()`.\nCaused by error in `$<-.data.frame`:\n! replacement has 1 row, data has 0\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](02_ml_sup_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n\n```{.r .cell-code}\nbike_features_tbl <- readRDS(\"C:/Users/ranja/Documents/GitHub/ss24-bdml-ranjan/Business Decisions with Machine Learning/Machine Learning/data/Business Decisions with Machine Learning/bike_features_tbl.rds\")\nbike_features_tbl <- bike_features_tbl %>% \n  select(frame_material:gender, `Rear Derailleur`, `Shift Lever`) %>% \n  mutate(\n    `shimano dura-ace`        = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano dura-ace \") %>% as.numeric(),\n    `shimano ultegra`         = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano ultegra \") %>% as.numeric(),\n    `shimano 105`             = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano 105 \") %>% as.numeric(),\n    `shimano tiagra`          = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano tiagra \") %>% as.numeric(),\n    `Shimano sora`            = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano sora\") %>% as.numeric(),\n    `shimano deore`           = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano deore(?! xt)\") %>% as.numeric(),\n    `shimano slx`             = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano slx\") %>% as.numeric(),\n    `shimano grx`             = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano grx\") %>% as.numeric(),\n    `Shimano xt`              = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano deore xt |shimano xt \") %>% as.numeric(),\n    `Shimano xtr`             = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano xtr\") %>% as.numeric(),\n    `Shimano saint`           = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano saint\") %>% as.numeric(),\n    `SRAM red`                = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"sram red\") %>% as.numeric(),\n    `SRAM force`              = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"sram force\") %>% as.numeric(),\n    `SRAM rival`              = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"sram rival\") %>% as.numeric(),\n    `SRAM apex`               = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"sram apex\") %>% as.numeric(),\n    `SRAM xx1`                = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"sram xx1\") %>% as.numeric(),\n    `SRAM x01`                = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"sram x01|sram xo1\") %>% as.numeric(),\n    `SRAM gx`                 = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"sram gx\") %>% as.numeric(),\n    `SRAM nx`                 = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"sram nx\") %>% as.numeric(),\n    `SRAM sx`                 = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"sram sx\") %>% as.numeric(),\n    `SRAM sx`                 = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"sram sx\") %>% as.numeric(),\n    `Campagnolo potenza`      = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"campagnolo potenza\") %>% as.numeric(),\n    `Campagnolo super record` = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"campagnolo super record\") %>% as.numeric(),\n    `shimano nexus`           = `Shift Lever`     %>% str_to_lower() %>% str_detect(\"shimano nexus\") %>% as.numeric(),\n    `shimano alfine`          = `Shift Lever`     %>% str_to_lower() %>% str_detect(\"shimano alfine\") %>% as.numeric()\n  ) %>%  \n  select(-c(`Rear Derailleur`, `Shift Lever`)) %>% \n  mutate_if(is.numeric, ~replace(., is.na(.), 0)) \nbike_features_tbl <- bike_features_tbl %>% \n  mutate(id = row_number()) %>% \n  mutate(frame_material = factor(frame_material)) %>%\n  select(id, everything()) \nbike_features_tbl %>% distinct(category_2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 20 × 1\n   category_2    \n   <chr>         \n 1 Race          \n 2 Endurance     \n 3 E-Road        \n 4 Cyclocross    \n 5 Triathlon Bike\n 6 Fat Bikes     \n 7 Cross-Country \n 8 Adventure     \n 9 All-Road      \n10 E-Gravel      \n11 Trail         \n12 E-Mountain    \n13 Downhill      \n14 Dirt Jump     \n15 Enduro        \n16 E-City        \n17 E-Trekking    \n18 E-Fitness     \n19 City          \n20 Touring       \n```\n\n\n:::\n\n```{.r .cell-code}\nsplit_obj <- rsample::initial_split(bike_features_tbl, prop   = 0.80, \n                                    strata = \"category_2\")\nsplit_obj %>% training() %>% distinct(category_2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 20 × 1\n   category_2    \n   <chr>         \n 1 Race          \n 2 Endurance     \n 3 E-Road        \n 4 Cyclocross    \n 5 Triathlon Bike\n 6 Fat Bikes     \n 7 Cross-Country \n 8 All-Road      \n 9 E-Gravel      \n10 E-Mountain    \n11 Downhill      \n12 Dirt Jump     \n13 Enduro        \n14 E-Trekking    \n15 E-City        \n16 E-Fitness     \n17 City          \n18 Touring       \n19 Adventure     \n20 Trail         \n```\n\n\n:::\n\n```{.r .cell-code}\nsplit_obj %>% testing() %>% distinct(category_2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 15 × 1\n   category_2    \n   <chr>         \n 1 Race          \n 2 Endurance     \n 3 Cyclocross    \n 4 Triathlon Bike\n 5 Cross-Country \n 6 All-Road      \n 7 E-Gravel      \n 8 Trail         \n 9 E-Mountain    \n10 Dirt Jump     \n11 Enduro        \n12 E-City        \n13 E-Trekking    \n14 City          \n15 Touring       \n```\n\n\n:::\n\n```{.r .cell-code}\ntrain_tbl <- training(split_obj)\ntest_tbl  <- testing(split_obj)\ntrain_data <- train_tbl %>% set_names(str_replace_all(names(train_tbl), \" |-\", \"_\"))\ntest_data  <- test_tbl  %>% set_names(str_replace_all(names(test_tbl),  \" |-\", \"_\"))\n# recipe\nbike_rec <- \n  recipe(frame_material ~ ., data = train_data) %>% \n  step_dummy(all_nominal(), -all_outcomes()) %>% \n  step_zv(all_predictors()) \nd <- summary(bike_rec)\nlr_mod <- \n  logistic_reg() %>% \n  set_engine(\"glm\")\nlr_mod\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nLogistic Regression Model Specification (classification)\n\nComputational engine: glm \n```\n\n\n:::\n\n```{.r .cell-code}\nbike_wflow <- \n  workflow() %>% \n  add_model(lr_mod) %>% \n  add_recipe(bike_rec)\nbike_wflow\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n══ Workflow ════════════════════════════════════════════════════════════════════\nPreprocessor: Recipe\nModel: logistic_reg()\n\n── Preprocessor ────────────────────────────────────────────────────────────────\n2 Recipe Steps\n\n• step_dummy()\n• step_zv()\n\n── Model ───────────────────────────────────────────────────────────────────────\nLogistic Regression Model Specification (classification)\n\nComputational engine: glm \n```\n\n\n:::\n\n```{.r .cell-code}\nbike_fit <- \n  bike_wflow %>% \n  fit(data = train_data)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: glm.fit: algorithm did not converge\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: glm.fit: fitted probabilities numerically 0 or 1 occurred\n```\n\n\n:::\n\n```{.r .cell-code}\nbike_fit\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n══ Workflow [trained] ══════════════════════════════════════════════════════════\nPreprocessor: Recipe\nModel: logistic_reg()\n\n── Preprocessor ────────────────────────────────────────────────────────────────\n2 Recipe Steps\n\n• step_dummy()\n• step_zv()\n\n── Model ───────────────────────────────────────────────────────────────────────\n\nCall:  stats::glm(formula = ..y ~ ., family = stats::binomial, data = data)\n\nCoefficients:\n               (Intercept)                          id  \n                -361.94313                     1.82255  \n                    weight                       price  \n                 -13.66738                     0.07137  \n          shimano_dura_ace             shimano_ultegra  \n                 -41.55333                   -11.79363  \n               shimano_105              shimano_tiagra  \n                  21.81707                    50.30429  \n             shimano_deore                 shimano_slx  \n                  92.49057                   -13.25504  \n               shimano_grx                  Shimano_xt  \n                   1.04015                    19.60703  \n             Shimano_saint                    SRAM_red  \n                  74.71306                  -239.87704  \n                SRAM_force                  SRAM_rival  \n                 -99.37881                   -28.89573  \n                 SRAM_apex                    SRAM_xx1  \n                 -35.29523                  -111.57620  \n                  SRAM_x01                     SRAM_gx  \n                 -70.92372                    16.83711  \n                   SRAM_nx                     SRAM_sx  \n                  11.99500                    51.17035  \n        Campagnolo_potenza     Campagnolo_super_record  \n                 -48.09676                  -347.21114  \n             shimano_nexus              shimano_alfine  \n                 -13.95252                   -58.08288  \n         category_1_Gravel    category_1_Hybrid...City  \n                  20.37421                   -49.12210  \n       category_1_Mountain             category_1_Road  \n                  63.43634                   238.41142  \n       category_2_All.Road             category_2_City  \n                 147.11507                     3.90347  \n  category_2_Cross.Country       category_2_Cyclocross  \n                  30.61002                    55.25100  \n      category_2_Dirt.Jump         category_2_Downhill  \n                 -15.99436                  -145.95799  \n         category_2_E.City        category_2_E.Fitness  \n                   7.00100                  -103.85428  \n       category_2_E.Gravel       category_2_E.Mountain  \n                  82.72197                    92.85853  \n         category_2_E.Road       category_2_E.Trekking  \n                 256.70379                          NA  \n      category_2_Endurance           category_2_Enduro  \n                  46.65253                   -77.55846  \n      category_2_Fat.Bikes             category_2_Race  \n                 191.16574                    14.72811  \n\n...\nand 36 more lines.\n```\n\n\n:::\n\n```{.r .cell-code}\nbike_fit %>% \n  pull_workflow_fit() %>% \n  tidy()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: `pull_workflow_fit()` was deprecated in workflows 0.2.3.\nℹ Please use `extract_fit_parsnip()` instead.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 77 × 5\n   term              estimate std.error  statistic p.value\n   <chr>                <dbl>     <dbl>      <dbl>   <dbl>\n 1 (Intercept)      -362.     7003120.  -0.0000517   1.00 \n 2 id                  1.82      9095.   0.000200    1.00 \n 3 weight            -13.7     205742.  -0.0000664   1.00 \n 4 price               0.0714      40.8  0.00175     0.999\n 5 shimano_dura_ace  -41.6     543671.  -0.0000764   1.00 \n 6 shimano_ultegra   -11.8     525506.  -0.0000224   1.00 \n 7 shimano_105        21.8     559317.   0.0000390   1.00 \n 8 shimano_tiagra     50.3     596104.   0.0000844   1.00 \n 9 shimano_deore      92.5     285374.   0.000324    1.00 \n10 shimano_slx       -13.3     276701.  -0.0000479   1.00 \n# ℹ 67 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\nbike_pred <- \n  predict(bike_fit, test_data, type=\"prob\") %>% \n  bind_cols(test_data %>% select(frame_material, category_2)) \nbike_pred %>% \n  roc_curve(truth = frame_material, .pred_aluminium) %>% \n  autoplot()\n```\n\n::: {.cell-output-display}\n![](02_ml_sup_files/figure-html/unnamed-chunk-1-2.png){width=672}\n:::\n\n```{.r .cell-code}\nbike_pred %>% \n  roc_curve(truth = frame_material, .pred_carbon) %>% \n  autoplot()\n```\n\n::: {.cell-output-display}\n![](02_ml_sup_files/figure-html/unnamed-chunk-1-3.png){width=672}\n:::\n\n```{.r .cell-code}\nbike_pred\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 47 × 4\n   .pred_aluminium .pred_carbon frame_material category_2    \n             <dbl>        <dbl> <fct>          <chr>         \n 1        2.22e-16 1            carbon         Race          \n 2        2.22e-16 1            carbon         Race          \n 3        2.64e-13 1.00         carbon         Race          \n 4        1.23e- 8 1.00         carbon         Race          \n 5        1.00e+ 0 0.0000000274 aluminium      Endurance     \n 6        5.77e- 5 1.00         carbon         Endurance     \n 7        2.22e-16 1            carbon         Endurance     \n 8        2.22e-16 1            carbon         Cyclocross    \n 9        2.22e-16 1            carbon         Triathlon Bike\n10        2.22e-16 1            carbon         Triathlon Bike\n# ℹ 37 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\nroc_al <- bike_pred %>% \n  roc_auc(truth = frame_material, .pred_aluminium)\nroc_al\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  <chr>   <chr>          <dbl>\n1 roc_auc binary         0.972\n```\n\n\n:::\n\n```{.r .cell-code}\nroc_car <- bike_pred %>% \n  roc_auc(truth = frame_material, .pred_carbon)\nroc_car\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  <chr>   <chr>          <dbl>\n1 roc_auc binary        0.0284\n```\n\n\n:::\n\n```{.r .cell-code}\n# Evaluation\nmodel_01_linear_lm_simple <- linear_reg(mode = \"regression\") %>%\n  set_engine(\"lm\") %>%\n  fit(price ~ category_2 + frame_material, data = train_data)\nmodel_01_linear_lm_simple\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nparsnip model object\n\n\nCall:\nstats::lm(formula = price ~ category_2 + frame_material, data = data)\n\nCoefficients:\n             (Intercept)        category_2All-Road            category_2City  \n                  2061.5                    -400.8                   -1273.3  \n category_2Cross-Country      category_2Cyclocross       category_2Dirt Jump  \n                  -245.0                    -528.9                    -577.5  \n      category_2Downhill          category_2E-City       category_2E-Fitness  \n                  1533.3                     779.5                     980.8  \n      category_2E-Gravel      category_2E-Mountain          category_2E-Road  \n                  1125.0                    1139.5                     857.5  \n    category_2E-Trekking       category_2Endurance          category_2Enduro  \n                  1521.5                    -395.7                     123.6  \n     category_2Fat Bikes            category_2Race         category_2Touring  \n                 -1460.0                     467.9                    -851.1  \n         category_2Trail  category_2Triathlon Bike      frame_materialcarbon  \n                  -336.2                     239.2                    1782.5  \n```\n\n\n:::\n\n```{.r .cell-code}\ntest_data <- test_data %>% filter(category_2 != \"Fat Bikes\")\nyards <- model_01_linear_lm_simple\nyards\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nparsnip model object\n\n\nCall:\nstats::lm(formula = price ~ category_2 + frame_material, data = data)\n\nCoefficients:\n             (Intercept)        category_2All-Road            category_2City  \n                  2061.5                    -400.8                   -1273.3  \n category_2Cross-Country      category_2Cyclocross       category_2Dirt Jump  \n                  -245.0                    -528.9                    -577.5  \n      category_2Downhill          category_2E-City       category_2E-Fitness  \n                  1533.3                     779.5                     980.8  \n      category_2E-Gravel      category_2E-Mountain          category_2E-Road  \n                  1125.0                    1139.5                     857.5  \n    category_2E-Trekking       category_2Endurance          category_2Enduro  \n                  1521.5                    -395.7                     123.6  \n     category_2Fat Bikes            category_2Race         category_2Touring  \n                 -1460.0                     467.9                    -851.1  \n         category_2Trail  category_2Triathlon Bike      frame_materialcarbon  \n                  -336.2                     239.2                    1782.5  \n```\n\n\n:::\n\n```{.r .cell-code}\ng1 <- bike_features_tbl %>% \n  mutate(category_2 = as.factor(category_2) %>% \n           fct_reorder(price)) %>% \n  \n  ggplot(aes(category_2, price)) +\n  geom_violin() +\n  geom_jitter(width = 0.1, alpha = 0.5, color = \"#2dc6d6\") +\n  coord_flip() +\n  facet_wrap(~ frame_material) +\n  scale_y_continuous(labels = scales::dollar_format()) +\n  labs(\n    title = \"Unit Price for Each Model\",\n    y = \"\", x = \"Category 2\"\n  )\ng1\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Groups with fewer than two datapoints have been dropped.\nℹ Set `drop = FALSE` to consider such groups for position adjustment purposes.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Groups with fewer than two datapoints have been dropped.\nℹ Set `drop = FALSE` to consider such groups for position adjustment purposes.\nGroups with fewer than two datapoints have been dropped.\nℹ Set `drop = FALSE` to consider such groups for position adjustment purposes.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](02_ml_sup_files/figure-html/unnamed-chunk-1-4.png){width=672}\n:::\n\n```{.r .cell-code}\nnew_race_alu <- tibble(\n  model = \"Exceed AL SL new\",\n  category_2 = \"Race\",\n  frame_material = \"aluminium\",\n  shimano_dura_ace = 0,\n  shimano_ultegra = 0,\n  shimano_105 = 0,\n  shimano_tiagra = 0,\n  Shimano_sora = 0,\n  shimano_deore = 0,\n  shimano_slx = 0,\n  shimano_grx = 0,\n  Shimano_xt = 1,\n  Shimano_xtr = 0,\n  Shimano_saint = 0,\n  SRAM_red = 0,\n  SRAM_force = 0,\n  SRAM_rival = 0,\n  SRAM_apex = 0,\n  SRAM_xx1 = 0,\n  SRAM_x01 = 0,\n  SRAM_gx = 0,\n  SRAM_nx = 0,\n  SRAM_sx = 0,\n  Campagnolo_potenza = 0,\n  Campagnolo_super_record = 0,\n  shimano_nexus = 0,\n  shimano_alfine = 0\n) \nnew_race_alu\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 27\n  model   category_2 frame_material shimano_dura_ace shimano_ultegra shimano_105\n  <chr>   <chr>      <chr>                     <dbl>           <dbl>       <dbl>\n1 Exceed… Race       aluminium                     0               0           0\n# ℹ 21 more variables: shimano_tiagra <dbl>, Shimano_sora <dbl>,\n#   shimano_deore <dbl>, shimano_slx <dbl>, shimano_grx <dbl>,\n#   Shimano_xt <dbl>, Shimano_xtr <dbl>, Shimano_saint <dbl>, SRAM_red <dbl>,\n#   SRAM_force <dbl>, SRAM_rival <dbl>, SRAM_apex <dbl>, SRAM_xx1 <dbl>,\n#   SRAM_x01 <dbl>, SRAM_gx <dbl>, SRAM_nx <dbl>, SRAM_sx <dbl>,\n#   Campagnolo_potenza <dbl>, Campagnolo_super_record <dbl>,\n#   shimano_nexus <dbl>, shimano_alfine <dbl>\n```\n\n\n:::\n\n```{.r .cell-code}\npredict(model_01_linear_lm_simple, new_data = new_race_alu)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 1\n  .pred\n  <dbl>\n1 2529.\n```\n\n\n:::\n\n```{.r .cell-code}\nmodels_tbl <- tibble(\n  model_id = str_c(\"Model 0\", 1:1),\n  model = list(\n    model_01_linear_lm_simple\n  )\n)\nmodels_tbl\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 2\n  model_id model   \n  <chr>    <list>  \n1 Model 01 <fit[+]>\n```\n\n\n:::\n\n```{.r .cell-code}\npredictions_new_race_alu_tbl <- models_tbl %>%\n  mutate(predictions = map(model, predict, new_data = new_race_alu)) %>%\n  unnest(predictions) %>%\n  mutate(category_2 = \"Race\") %>%\n  left_join(new_race_alu, by = \"category_2\")\npredictions_new_race_alu_tbl\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 30\n  model_id model.x  .pred category_2 model.y     frame_material shimano_dura_ace\n  <chr>    <list>   <dbl> <chr>      <chr>       <chr>                     <dbl>\n1 Model 01 <fit[+]> 2529. Race       Exceed AL … aluminium                     0\n# ℹ 23 more variables: shimano_ultegra <dbl>, shimano_105 <dbl>,\n#   shimano_tiagra <dbl>, Shimano_sora <dbl>, shimano_deore <dbl>,\n#   shimano_slx <dbl>, shimano_grx <dbl>, Shimano_xt <dbl>, Shimano_xtr <dbl>,\n#   Shimano_saint <dbl>, SRAM_red <dbl>, SRAM_force <dbl>, SRAM_rival <dbl>,\n#   SRAM_apex <dbl>, SRAM_xx1 <dbl>, SRAM_x01 <dbl>, SRAM_gx <dbl>,\n#   SRAM_nx <dbl>, SRAM_sx <dbl>, Campagnolo_potenza <dbl>,\n#   Campagnolo_super_record <dbl>, shimano_nexus <dbl>, shimano_alfine <dbl>\n```\n\n\n:::\n\n```{.r .cell-code}\ng2 <- g1 +\n  geom_point(aes(y = .pred), color = \"red\", alpha = 0.5,\n             data = predictions_new_race_alu_tbl) +\n  ggrepel::geom_text_repel(aes(label = model_id, y = .pred),\n                           size = 3,\n                           data = predictions_new_race_alu_tbl)\ng2\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Groups with fewer than two datapoints have been dropped.\nℹ Set `drop = FALSE` to consider such groups for position adjustment purposes.\nGroups with fewer than two datapoints have been dropped.\nℹ Set `drop = FALSE` to consider such groups for position adjustment purposes.\nGroups with fewer than two datapoints have been dropped.\nℹ Set `drop = FALSE` to consider such groups for position adjustment purposes.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](02_ml_sup_files/figure-html/unnamed-chunk-1-5.png){width=672}\n:::\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}